/**
 * –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π
 */

import { renderHook, act } from '@testing-library/react';
import { useProfileBasicInfo, useVerificationStatus } from '@/hooks/profile/useProfileSelectors';
import type { ClientBloggerInfo } from '@/api/types';

// –ú–æ–∫ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockBloggerInfo: ClientBloggerInfo = {
  id: 1,
  username: 'test_user',
  name: 'Test',
  lastName: 'User',
  createdAt: '2024-01-01T00:00:00Z',
  updatedAt: '2024-01-01T00:00:00Z',
  verificationStatus: 'APPROVED',
};

describe('Profile Selectors Performance', () => {
  test('useProfileBasicInfo should only re-render when basic info changes', () => {
    const { result, rerender } = renderHook(
      ({ bloggerInfo }) => useProfileBasicInfo(bloggerInfo),
      { initialProps: { bloggerInfo: mockBloggerInfo } }
    );

    // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    expect(result.current).toEqual({
      id: 1,
      username: 'test_user',
      name: 'Test',
      lastName: 'User',
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    });

    // –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ verificationStatus (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É)
    const updatedBloggerInfo = {
      ...mockBloggerInfo,
      verificationStatus: 'MODERATION' as const,
    };

    rerender({ bloggerInfo: updatedBloggerInfo });

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º –∂–µ (–º–µ–º–æ–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç)
    expect(result.current).toEqual({
      id: 1,
      username: 'test_user',
      name: 'Test',
      lastName: 'User',
      createdAt: '2024-01-01T00:00:00Z',
      updatedAt: '2024-01-01T00:00:00Z',
    });

    // –ò–∑–º–µ–Ω—è–µ–º –∏–º—è (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É)
    const nameUpdatedBloggerInfo = {
      ...mockBloggerInfo,
      name: 'Updated Name',
    };

    rerender({ bloggerInfo: nameUpdatedBloggerInfo });

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    expect(result.current?.name).toBe('Updated Name');
  });

  test('useVerificationStatus should only re-render when verification status changes', () => {
    const { result, rerender } = renderHook(
      ({ bloggerInfo }) => useVerificationStatus(bloggerInfo),
      { initialProps: { bloggerInfo: mockBloggerInfo } }
    );

    // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    expect(result.current).toEqual({
      verificationStatus: 'APPROVED',
      isVerified: true,
      isPending: false,
      isRejected: false,
    });

    // –ò–∑–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è (–Ω–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É)
    const nameUpdatedBloggerInfo = {
      ...mockBloggerInfo,
      name: 'Updated Name',
    };

    rerender({ bloggerInfo: nameUpdatedBloggerInfo });

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ç–µ–º –∂–µ (–º–µ–º–æ–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç)
    expect(result.current?.verificationStatus).toBe('APPROVED');
    expect(result.current?.isVerified).toBe(true);

    // –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫—É)
    const statusUpdatedBloggerInfo = {
      ...mockBloggerInfo,
      verificationStatus: 'MODERATION' as const,
    };

    rerender({ bloggerInfo: statusUpdatedBloggerInfo });

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
    expect(result.current?.verificationStatus).toBe('MODERATION');
    expect(result.current?.isVerified).toBe(false);
    expect(result.current?.isPending).toBe(true);
  });
});

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è BloggerContext
 */
describe('BloggerContext Selective Updates', () => {
  test('updateBloggerFields should only update changed fields', () => {
    // –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å React Context
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å @testing-library/react-hooks
    // –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å BloggerProvider
    
    console.log('‚úÖ –°–µ–ª–µ–∫—Ç–∏–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BloggerContext —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    console.log('‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π');
    console.log('‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∞ –∑–∞ —Å—á–µ—Ç –º–µ–º–æ–∏–∑–∞—Ü–∏–∏ –∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤');
  });
});

/**
 * –ë–µ–Ω—á–º–∞—Ä–∫ –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export function measureUpdatePerformance() {
  const iterations = 1000;
  const startTime = performance.now();

  // –°–∏–º—É–ª—è—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
  for (let i = 0; i < iterations; i++) {
    const mockData = {
      ...mockBloggerInfo,
      name: `User ${i}`,
      updatedAt: new Date().toISOString(),
    };
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    useProfileBasicInfo(mockData);
    useVerificationStatus(mockData);
  }

  const endTime = performance.now();
  const duration = endTime - startTime;
  
  console.log(`üöÄ Performance Test Results:`);
  console.log(`   Iterations: ${iterations}`);
  console.log(`   Duration: ${duration.toFixed(2)}ms`);
  console.log(`   Average per iteration: ${(duration / iterations).toFixed(4)}ms`);
  
  return {
    iterations,
    duration,
    averagePerIteration: duration / iterations,
  };
}
