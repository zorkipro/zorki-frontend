/**
 * SessionContext - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Å–µ—Å—Å–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ auth state (SRP - Single Responsibility Principle)
 */

import {
  createContext,
  useContext,
  useEffect,
  useState,
  useCallback,
} from "react";
import { User, Session } from "@supabase/supabase-js";
import { supabase } from "@/integrations/supabase/client";
import { logger } from "@/utils/logger";
import { saveAccessToken, removeAccessToken } from "@/utils/googleAuth";
import { getClientMe } from "@/api/endpoints/client";

export interface SessionContextType {
  /** –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Supabase */
  user: User | null;
  /** –¢–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è Supabase */
  session: Session | null;
  /** –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ */
  loading: boolean;
  /** JWT —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ */
  accessToken: string | null;
  /** –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã */
  signOut: () => Promise<void>;
  /** –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é */
  refreshSession: () => Promise<void>;
  /** –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ */
  determineRedirectPath: () => Promise<string>;
}

const SessionContext = createContext<SessionContextType | undefined>(undefined);

/**
 * Hook –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ SessionContext
 * @throws {Error} –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ SessionProvider
 */
export const useSession = () => {
  const context = useContext(SessionContext);
  if (!context) {
    throw new Error("useSession must be used within a SessionProvider");
  }
  return context;
};

interface SessionProviderProps {
  children: React.ReactNode;
}

/**
 * Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const SessionProvider = ({ children }: SessionProviderProps) => {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [accessToken, setAccessToken] = useState<string | null>(null);

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ /auth/client/me
   */
  const determineRedirectPath = useCallback(async (): Promise<string> => {
    try {
      if (import.meta.env.DEV) {
        console.log('üîç SessionContext: Determining redirect path after auth...');
      }
      
      const clientData = await getClientMe();
      
      if (import.meta.env.DEV) {
        console.log('‚úÖ SessionContext: Client data received:', {
          hasBlogger: !!clientData.blogger,
          bloggerUsername: clientData.blogger?.username,
          hasLinkRequest: !!clientData.lastLinkRequest,
          fullClientData: clientData  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        });
      }

      // –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –µ—Å—Ç—å username –≤ blogger - –∏–¥–µ–º –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–µ—Ç –±—ã—Ç—å username
      const username = clientData.blogger?.username || 
                      (clientData as any).username || 
                      (clientData as any).user?.username;
      
      if (username) {
        if (import.meta.env.DEV) {
          console.log('‚úÖ SessionContext: User has username, redirecting to profile edit', { username });
        }
        return '/profile/edit';
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç username - –∏–¥–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
      if (import.meta.env.DEV) {
        console.log('‚ùå SessionContext: User has no username, redirecting to profile setup', {
          bloggerUsername: clientData.blogger?.username,
          directUsername: (clientData as any).username,
          userUsername: (clientData as any).user?.username,
          bloggerExists: !!clientData.blogger
        });
      }
      return '/profile-setup';
      
    } catch (error) {
      if (import.meta.env.DEV) {
        console.log('‚ùå SessionContext: Failed to get client data, redirecting to profile setup:', error);
      }
      
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ - –∏–¥–µ–º –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤–≤–µ—Å—Ç–∏ username
      return '/profile-setup';
    }
  }, []);

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ —Ç–æ–∫–µ–Ω–∞
   */
  const updateSession = useCallback((newSession: Session | null) => {
    setSession(newSession);
    setUser(newSession?.user ?? null);

    const token = newSession?.access_token ?? null;
    setAccessToken(token);

    // –û–±–Ω–æ–≤–ª—è–µ–º sessionStorage —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞
    if (token) {
      saveAccessToken(token);
    } else {
      removeAccessToken();
    }
  }, []);

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è)
   */
  const refreshSession = useCallback(async () => {
    try {
      const { data, error } = await supabase.auth.getSession();
      if (error) throw error;
      updateSession(data.session);
    } catch (error) {
      logger.error("Failed to refresh session", error);
    }
  }, [updateSession]);

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  const signOut = useCallback(async () => {
    try {
      // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω
      removeAccessToken();
      setAccessToken(null);

      // –í—ã—Ö–æ–¥–∏–º –∏–∑ Supabase
      await supabase.auth.signOut();

      setUser(null);
      setSession(null);
    } catch (error) {
      logger.error("Sign out failed", error);
      throw error;
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
  useEffect(() => {
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è auth state
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, newSession) => {
      updateSession(newSession);
      setLoading(false);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
    supabase.auth.getSession().then(({ data: { session: initialSession } }) => {
      updateSession(initialSession);
      setLoading(false);
    });

    return () => {
      subscription.unsubscribe();
    };
  }, [updateSession]);

  const value: SessionContextType = {
    user,
    session,
    loading,
    accessToken,
    signOut,
    refreshSession,
    determineRedirectPath,
  };

  return (
    <SessionContext.Provider value={value}>{children}</SessionContext.Provider>
  );
};
