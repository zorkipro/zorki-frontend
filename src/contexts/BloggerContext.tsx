/**
 * BloggerContext - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–≥–µ—Ä–∞
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ blogger info (SRP - Single Responsibility Principle)
 */

import { createContext, useContext, useEffect, useState, useCallback, ReactNode } from 'react';
import { logger } from '@/utils/logger';
import { getClientMe } from '@/api/endpoints/client';
import { useSession } from './SessionContext';
import type { ClientBloggerInfo, ClientLinkRequestInfo } from '@/api/types';

export interface BloggerContextType {
  /** –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–≥–µ—Ä–µ */
  bloggerInfo: ClientBloggerInfo | null;
  /** –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–∏–≤—è–∑–∫—É —Å–æ—Ü—Å–µ—Ç–∏ */
  lastLinkRequest: ClientLinkRequestInfo | null;
  /** –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–∞ */
  bloggerInfoLoading: boolean;
  /** –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–∞ */
  bloggerInfoError: string | null;
  /** –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é */
  refreshBloggerInfo: () => Promise<void>;
  /** –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞ (—Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç 401) */
  tryLoadBloggerInfo: () => Promise<void>;
  /** –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –±–ª–æ–≥–µ—Ä–∞ */
  updateBloggerFields: (fields: Partial<ClientBloggerInfo>) => void;
  /** –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞ */
  clearBloggerInfo: () => void;
}

const BloggerContext = createContext<BloggerContextType | undefined>(undefined);

/**
 * Hook –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ BloggerContext
 * @throws {Error} –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ BloggerProvider
 */
export const useBlogger = () => {
  const context = useContext(BloggerContext);
  if (!context) {
    throw new Error('useBlogger must be used within a BloggerProvider');
  }
  return context;
};

interface BloggerProviderProps {
  children: ReactNode;
}

/**
 * Provider –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –±–ª–æ–≥–µ—Ä–∞
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
 */
export const BloggerProvider = ({ children }: BloggerProviderProps) => {
  const { session, accessToken } = useSession();

  const [bloggerInfo, setBloggerInfo] = useState<ClientBloggerInfo | null>(null);
  const [lastLinkRequest, setLastLinkRequest] = useState<ClientLinkRequestInfo | null>(null);
  const [bloggerInfoLoading, setBloggerInfoLoading] = useState(false);
  const [bloggerInfoError, setBloggerInfoError] = useState<string | null>(null);

  // –ö–†–ò–¢–ò–ß–ù–û: –ï—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ - –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
  const hasValidSession = !!(session?.access_token && accessToken && session?.user?.id);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (—Ç–æ–ª—å–∫–æ –≤ development)
  if (import.meta.env.DEV) {
    console.log('üîç BloggerContext Debug:', {
      hasSession: !!session,
      hasAccessToken: !!accessToken,
      hasUser: !!session?.user?.id,
      hasValidSession,
      sessionAccessToken: session?.access_token ? 'present' : 'missing',
      accessTokenValue: accessToken ? 'present' : 'missing',
      sessionStorageToken: sessionStorage.getItem('accessToken') ? 'present' : 'missing'
    });
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞
   */
  const clearBloggerInfo = useCallback(() => {
    setBloggerInfo(null);
    setLastLinkRequest(null);
    setBloggerInfoError(null);
  }, []);

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–æ–ª—è –±–ª–æ–≥–µ—Ä–∞ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
   */
  const updateBloggerFields = useCallback((fields: Partial<ClientBloggerInfo>) => {
    setBloggerInfo((prev) => {
      if (!prev) return prev;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const hasChanges = Object.keys(fields).some(key => {
        const typedKey = key as keyof ClientBloggerInfo;
        return prev[typedKey] !== fields[typedKey];
      });

      if (!hasChanges) {
        return prev;
      }

      return { ...prev, ...fields };
    });
  }, []);

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞
   */
  const refreshBloggerInfo = useCallback(async () => {
    if (import.meta.env.DEV) {
      console.log('üîÑ refreshBloggerInfo called:', { hasValidSession });
    }
    
    // –ö–†–ò–¢–ò–ß–ù–û: –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º API –µ—Å–ª–∏ –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
    if (!hasValidSession) {
      if (import.meta.env.DEV) {
        console.log('‚ùå Skipping API call - no valid session');
      }
      clearBloggerInfo();
      setBloggerInfoLoading(false);
      return;
    }

    if (import.meta.env.DEV) {
      console.log('‚úÖ Making API call to getClientMe');
    }
    try {
      setBloggerInfoLoading(true);
      setBloggerInfoError(null);

      const data = await getClientMe();
      
      setBloggerInfo(data.blogger);
      setLastLinkRequest(data.lastLinkRequest);
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Failed to fetch blogger info';
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ 401 (–Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
      if (error instanceof Error && !error.message.includes('401')) {
        logger.error('Failed to fetch blogger info', error);
      }

      // –î–ª—è 401 –æ—à–∏–±–æ–∫ –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ –ø–æ–∫–∞–∑–∞ –æ—à–∏–±–∫–∏
      if (error instanceof Error && error.message.includes('401')) {
        if (import.meta.env.DEV) {
          console.log('üîÑ BloggerContext: 401 error - clearing blogger info silently');
        }
        clearBloggerInfo();
        setBloggerInfoError(null); // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è 401
      } else {
        setBloggerInfoError(errorMessage);
        clearBloggerInfo();
      }
    } finally {
      setBloggerInfoLoading(false);
    }
  }, [hasValidSession, clearBloggerInfo]);

  /**
   * –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞ (—Ç–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç 401)
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å–ª–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω—ã
   */
  const tryLoadBloggerInfo = useCallback(async () => {
    if (!hasValidSession) return;
    
    try {
      const data = await getClientMe();
      setBloggerInfo(data.blogger);
      setLastLinkRequest(data.lastLinkRequest);
      if (import.meta.env.DEV) {
        console.log('‚úÖ Manual blogger info load successful:', data);
      }
    } catch (error) {
      // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º 401 - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —Å–≤—è–∑–∞–Ω —Å –±–ª–æ–≥–µ—Ä–æ–º
      if (!(error instanceof Error && error.message.includes('401'))) {
        if (import.meta.env.DEV) {
          console.log('‚ùå Manual blogger info load failed:', error);
        }
        throw error;
      }
      if (import.meta.env.DEV) {
        console.log('üîÑ Manual load: 401 error - user not linked to blogger');
      }
    }
  }, [hasValidSession]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è –ò –¥–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
  useEffect(() => {
    if (import.meta.env.DEV) {
      console.log('üîÑ BloggerContext useEffect triggered:', { hasValidSession, hasBloggerInfo: !!bloggerInfo });
    }
    
    if (!hasValidSession) {
      if (import.meta.env.DEV) {
        console.log('‚ùå Clearing blogger info - no valid session');
      }
      // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ - –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      clearBloggerInfo();
      setBloggerInfoLoading(false);
    } else if (!bloggerInfo && !bloggerInfoLoading) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Å—Å–∏—è, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–∞ - –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö
      if (import.meta.env.DEV) {
        console.log('üîÑ BloggerContext: Loading blogger info automatically...');
      }
      tryLoadBloggerInfo();
    }
  }, [hasValidSession, bloggerInfo, bloggerInfoLoading, clearBloggerInfo, tryLoadBloggerInfo]);

  const value: BloggerContextType = {
    bloggerInfo,
    lastLinkRequest,
    bloggerInfoLoading,
    bloggerInfoError,
    refreshBloggerInfo,
    tryLoadBloggerInfo,
    updateBloggerFields,
    clearBloggerInfo,
  };

  return <BloggerContext.Provider value={value}>{children}</BloggerContext.Provider>;
};
