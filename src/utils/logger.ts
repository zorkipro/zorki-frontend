/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 *
 * –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
 * - –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (DEBUG, INFO, WARN, ERROR)
 * - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 * - –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ DEV –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
 * - –ó–∞–º–µ—Ä—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å monitoring (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */

const isDev = import.meta.env.DEV;

/**
 * –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export enum LogLevel {
  DEBUG = 0,
  INFO = 1,
  WARN = 2,
  ERROR = 3,
  CRITICAL = 4,
}

/**
 * –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export interface LogContext {
  [key: string]: unknown;
  component?: string;
  action?: string;
  userId?: string;
  requestId?: string;
  duration?: number;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
 */
interface LoggerConfig {
  /** –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è */
  minLevel: LogLevel;
  /** –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ production */
  enableInProduction: boolean;
  /** Callback –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ monitoring —Å–∏—Å—Ç–µ–º—É */
  monitoringCallback?: (level: LogLevel, message: string, context?: LogContext) => void;
}

/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
 */
let config: LoggerConfig = {
  minLevel: isDev ? LogLevel.DEBUG : LogLevel.ERROR,
  enableInProduction: false,
};

/**
 * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–≥–µ—Ä–∞
 */
export function configureLogger(newConfig: Partial<LoggerConfig>): void {
  config = { ...config, ...newConfig };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º —É—Ä–æ–≤–Ω–µ
 */
function shouldLog(level: LogLevel): boolean {
  if (isDev) return level >= config.minLevel;
  return config.enableInProduction && level >= LogLevel.ERROR;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
 */
function formatContext(context?: LogContext): string {
  if (!context || Object.keys(context).length === 0) {
    return '';
  }
  return `\n  Context: ${JSON.stringify(context, null, 2)}`;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function getLevelPrefix(level: LogLevel): string {
  const prefixes = {
    [LogLevel.DEBUG]: 'üîç [DEBUG]',
    [LogLevel.INFO]: '‚ÑπÔ∏è  [INFO]',
    [LogLevel.WARN]: '‚ö†Ô∏è  [WARN]',
    [LogLevel.ERROR]: '‚ùå [ERROR]',
    [LogLevel.CRITICAL]: 'üî• [CRITICAL]',
  };
  return prefixes[level] || '[LOG]';
}

/**
 * –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function log(level: LogLevel, message: string, error?: unknown, context?: LogContext): void {
  if (!shouldLog(level)) return;

  const prefix = getLevelPrefix(level);
  const timestamp = new Date().toISOString();
  const contextStr = formatContext(context);

  const fullMessage = `${prefix} [${timestamp}] ${message}${contextStr}`;

  // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
  switch (level) {
    case LogLevel.DEBUG:
    case LogLevel.INFO:
    case LogLevel.WARN:
      // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
      break;
    case LogLevel.ERROR:
    case LogLevel.CRITICAL:
      console.error(fullMessage, error || '');
      break;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ monitoring (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
  if (config.monitoringCallback) {
    config.monitoringCallback(level, message, context);
  }
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ DEV —Ä–µ–∂–∏–º–µ
 *
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 *
 * @example
 * logger.debug('User clicked button', { component: 'Header', action: 'logout' });
 */
function debug(message: string, context?: LogContext): void {
  log(LogLevel.DEBUG, message, undefined, context);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
 *
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 *
 * @example
 * logger.info('Profile loaded successfully', { userId: '123', duration: 234 });
 */
function info(message: string, context?: LogContext): void {
  log(LogLevel.INFO, message, undefined, context);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
 *
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 *
 * @example
 * logger.warn('Deprecated API used', { component: 'ProfileEditor', method: 'oldSave' });
 */
function warn(message: string, context?: LogContext): void {
  log(LogLevel.WARN, message, undefined, context);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
 *
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 *
 * @example
 * logger.error('Failed to save profile', error, { userId: '123', action: 'save' });
 */
function error(message: string, error?: unknown, context?: LogContext): void {
  log(LogLevel.ERROR, message, error, context);
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
 * –õ–æ–≥–∏—Ä—É–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞, –¥–∞–∂–µ –≤ production
 *
 * @param message - –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 * @param error - –û–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
 * @param context - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
 */
function critical(message: string, error?: unknown, context?: LogContext): void {
  log(LogLevel.CRITICAL, message, error, context);
}

/**
 * –ó–∞–º–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
 *
 * @param label - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * @returns –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–º–µ—Ä–∞
 *
 * @example
 * const endTimer = logger.startTimer('loadProfile');
 * await loadProfile();
 * endTimer(); // –í—ã–≤–µ–¥–µ—Ç: "loadProfile: 234.56ms"
 */
function startTimer(label: string): () => void {
  const startTime = performance.now();
  return () => {
    const duration = performance.now() - startTime;
    debug(`‚è±Ô∏è  ${label}`, { duration: parseFloat(duration.toFixed(2)) });
  };
}

/**
 * –ì—Ä—É–ø–ø–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 *
 * @param label - –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
 * @param fn - –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø—ã
 *
 * @example
 * logger.group('Profile Loading', () => {
 *   logger.debug('Fetching profile data');
 *   logger.debug('Transforming data');
 *   logger.info('Profile loaded');
 * });
 */
function group(label: string, fn: () => void): void {
  if (!isDev) return;

  console.group(`üì¶ ${label}`);
  fn();

  console.groupEnd();
}

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã (—É–¥–æ–±–Ω–æ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
 *
 * @param data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
 * @param label - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
 *
 * @example
 * logger.table([{ id: 1, name: 'User 1' }, { id: 2, name: 'User 2' }], 'Users');
 */
function table(data: unknown[], label?: string): void {
  if (!isDev) return;
  if (label) {
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç logger API
 */
export const logger = {
  debug,
  info,
  warn,
  error,
  critical,
  startTimer,
  group,
  table,
  configure: configureLogger,
};

/**
 * –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º API
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logger.debug –≤–º–µ—Å—Ç–æ logDev
 */
export const logDev = debug;

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logger.error –≤–º–µ—Å—Ç–æ logError
 */
export const logError = error;

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logger.warn –≤–º–µ—Å—Ç–æ logWarn
 */
export const logWarn = warn;

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logger.info –≤–º–µ—Å—Ç–æ logInfo
 */
export const logInfo = info;

/**
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logger.debug –≤–º–µ—Å—Ç–æ logDebug
 */
export const logDebug = debug;

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ logger.startTimer
 */
export const logPerf = (label: string, startTime: number): void => {
  if (isDev) {
    const duration = performance.now() - startTime;
    debug(`‚è±Ô∏è  ${label}`, { duration: parseFloat(duration.toFixed(2)) });
  }
};

/**
 * –£—Å–ª–æ–≤–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–µ if statements —Å logger
 */
export const logIf = (condition: boolean, ...args: unknown[]): void => {
  if (condition && isDev) {
    // –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
  }
};
