import { useEffect, useRef, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useSession } from "@/contexts/SessionContext";
import { LoadingSpinner } from "@/ui-kit/components";

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω –≤–Ω—É—Ç—Ä–∏ Router –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
export const AuthRedirectHandler = () => {
  const navigate = useNavigate();
  const { user, loading, determineRedirectPath } = useSession();
  const hasRedirectedRef = useRef(false);
  const [isDeterminingRedirect, setIsDeterminingRedirect] = useState(false);

  useEffect(() => {
    const handleAuthRedirect = async () => {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –µ—â–µ –Ω–µ –¥–µ–ª–∞–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç
      if (user && !loading && !hasRedirectedRef.current) {
        if (import.meta.env.DEV) {
          console.log('üîÑ AuthRedirectHandler: User authenticated, determining redirect path...');
        }
        
        setIsDeterminingRedirect(true);
        hasRedirectedRef.current = true;
        
        try {
          const redirectPath = await determineRedirectPath();
          
          if (import.meta.env.DEV) {
            console.log('üîÑ AuthRedirectHandler: Redirecting to:', redirectPath);
          }
          
          navigate(redirectPath);
        } catch (error) {
          if (import.meta.env.DEV) {
            console.log('‚ùå AuthRedirectHandler: Failed to determine redirect path:', error);
          }
          // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
          navigate('/');
        } finally {
          setIsDeterminingRedirect(false);
        }
      }
    };

    handleAuthRedirect();
  }, [user, loading, determineRedirectPath, navigate]);

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    if (!user) {
      hasRedirectedRef.current = false;
      setIsDeterminingRedirect(false);
    }
  }, [user]);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–∏–Ω–≥ –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è —Å–µ—Å—Å–∏—è –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å
  if (loading || isDeterminingRedirect) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-50">
        <LoadingSpinner size="lg" />
      </div>
    );
  }

  // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –Ω–∏—á–µ–≥–æ –≤ –æ–±—ã—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  return null;
};
