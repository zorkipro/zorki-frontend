/**
 * TokenManager - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
 */

import { supabase } from "@/integrations/supabase/client";
import { getAccessToken } from "@/utils/googleAuth";
import { logger } from "@/utils/logger";

/**
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤:
 * 1. adminToken (sessionStorage) - –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * 2. adminTempToken (sessionStorage) - –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA
 * 3. accessToken (sessionStorage) - –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 4. supabaseToken (session) - fallback –∏–∑ Supabase —Å–µ—Å—Å–∏–∏
 */
export class TokenManager {
  private static instance: TokenManager;

  private constructor() {}

  /**
   * –ü–æ–ª—É—á–∏—Ç—å singleton instance
   */
  static getInstance(): TokenManager {
    if (!TokenManager.instance) {
      TokenManager.instance = new TokenManager();
    }
    return TokenManager.instance;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
   *
   * @returns —Ç–æ–∫–µ–Ω –∏–ª–∏ null –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  async getAuthToken(): Promise<string | null> {
    // 1. Admin token from sessionStorage (–¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π)
    const adminToken = sessionStorage.getItem("adminToken");
    if (adminToken) {
      if (import.meta.env.DEV) {
        console.log('üîë TokenManager: Using admin token');
      }
      return adminToken;
    }

    // 2. Admin temp token for 2FA (–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è 2FA)
    const adminTempToken = sessionStorage.getItem("adminTempToken");
    if (adminTempToken) {
      if (import.meta.env.DEV) {
        console.log('üîë TokenManager: Using admin temp token');
      }
      return adminTempToken;
    }

    // 3. Access Token –∏–∑ sessionStorage (–æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    const accessToken = getAccessToken();
    if (accessToken) {
      if (import.meta.env.DEV) {
        console.log('üîë TokenManager: Using access token', {
          length: accessToken.length,
          startsWith: accessToken.substring(0, 10),
          isSupabaseJWT: accessToken.startsWith('eyJ')
        });
      }
      return accessToken;
    }

    // 4. Fallback: Supabase —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏
    try {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      const supabaseToken = session?.access_token || null;

      if (supabaseToken) {
        if (import.meta.env.DEV) {
          console.log('üîë TokenManager: Using Supabase token', {
            length: supabaseToken.length,
            startsWith: supabaseToken.substring(0, 10),
            isSupabaseJWT: supabaseToken.startsWith('eyJ')
          });
        }
        return supabaseToken;
      }
    } catch (error) {
      logger.error("Error getting Supabase session", error);
    }

    if (import.meta.env.DEV) {
      console.log('üîë TokenManager: No token found');
    }
    return null;
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã)
   */
  clearAllTokens(): void {
    sessionStorage.removeItem("accessToken");
    sessionStorage.removeItem("adminToken");
    sessionStorage.removeItem("adminTempToken");
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ —Ç–æ–∫–µ–Ω—ã (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∞–¥–º–∏–Ω–∫–∏)
   */
  clearAdminTokens(): void {
    sessionStorage.removeItem("adminToken");
    sessionStorage.removeItem("adminTempToken");
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async hasAuthToken(): Promise<boolean> {
    const token = await this.getAuthToken();
    return token !== null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–∏–ø —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
   */
  getCurrentTokenType(): "admin" | "admin_temp" | "access" | "supabase" | null {
    if (sessionStorage.getItem("adminToken")) return "admin";
    if (sessionStorage.getItem("adminTempToken")) return "admin_temp";
    if (getAccessToken()) return "access";
    return "supabase"; // –ü—Ä–æ–≤–µ—Ä–∫–∞ Supabase —Ç—Ä–µ–±—É–µ—Ç async, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º
  }
}

// Export singleton instance
export const tokenManager = TokenManager.getInstance();
