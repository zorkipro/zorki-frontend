// ============================================
// Admin API Endpoints
// ============================================
// ‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –Ω–∞ backend.
// –°–º. docs/API_TODOS.md –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤.
// ============================================

import { apiRequest } from "../client";
import type {
  AdminLoginInputDto,
  AdminLoginOutputDto,
  AdminSignUpInputDto,
  AdminAuthMeOutputDto,
  AdminLogin2faFakeInputDto,
  AdminGetLinkBloggerClientRequestOutputDto,
  LinkRequestStatus,
  PaginationUtil,
  GetLinkRequestsParams,
  AdminGetBloggersQuery,
  AdminGetBloggersResponse,
  AdminGetBloggersStatsOutputDto,
  AdminCreateBloggerInputDto,
  BloggerUpdateProfileInputDto,
  BloggerUpdateSocialPriceInputDto,
  ApiSocialType,
} from "../types";

// ====== POST /auth/admin/login - –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞ ======

/**
 * –õ–æ–≥–∏–Ω –∞–¥–º–∏–Ω–∞
 *
 * @param data - username –∏ password
 * @returns Promise —Å accessToken
 *
 * @throws APIError 400 - Incorrect input data
 * @throws APIError 401 - Unauthorized (–Ω–µ–≤–µ—Ä–Ω—ã–µ credentials)
 *
 * @note –¢–æ–∫–µ–Ω –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ sessionStorage.setItem('adminToken', accessToken)
 *
 * @example
 * ```typescript
 * const { accessToken } = await adminLogin({
 *   username: 'admin',
 *   password: 'Admin123'
 * });
 * sessionStorage.setItem('adminToken', accessToken);
 * ```
 */
export async function adminLogin(
  data: AdminLoginInputDto,
): Promise<AdminLoginOutputDto> {
  return apiRequest<AdminLoginOutputDto>("/auth/admin/login", {
    method: "POST",
    body: JSON.stringify(data),
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ (—É–±–∏—Ä–∞–µ–º baseUrl)
  });
}

// ====== POST /auth/admin/signup - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∞ ======

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç admin auth)
 *
 * @param data - email, username, password
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Incorrect input data –∏–ª–∏ username/email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
 * @throws APIError 401 - Unauthorized
 *
 * @note –¢—Ä–µ–±—É–µ—Ç Authorization header —Å admin token
 *
 * @example
 * ```typescript
 * await adminSignUp({
 *   email: 'newadmin@example.com',
 *   username: 'newadmin',
 *   password: 'Admin123'
 * });
 * ```
 */
export async function adminSignUp(data: AdminSignUpInputDto): Promise<void> {
  return apiRequest<void>("/auth/admin/signup", {
    method: "POST",
    body: JSON.stringify(data),
  });
}

// ====== GET /auth/admin/me - –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞–¥–º–∏–Ω–µ ======

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º –∞–¥–º–∏–Ω–µ
 *
 * @returns Promise —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥–º–∏–Ω–µ
 * @throws APIError 401 - Unauthorized
 *
 * @note –¢—Ä–µ–±—É–µ—Ç Authorization header —Å admin token
 *
 * @example
 * ```typescript
 * const adminInfo = await getAdminMe();
 * ```
 */
export async function getAdminMe(): Promise<AdminAuthMeOutputDto> {
  return apiRequest<AdminAuthMeOutputDto>("/auth/admin/me", {
    method: "GET",
  });
}

// ====== POST /auth/admin/2fa/confirm - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA ======

/**
 * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 2FA –∫–æ–¥–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 *
 * @param code - 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
 * @returns Promise —Å –ø–æ–ª–Ω—ã–º accessToken
 *
 * @throws APIError 400 - Incorrect input data (–Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥)
 * @throws APIError 401 - Unauthorized (–∏—Å—Ç–µ–∫—à–∏–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω)
 *
 * @note –¢—Ä–µ–±—É–µ—Ç Authorization header —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º –∏–∑ /auth/admin/login
 * @note –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π JWT —Ç–æ–∫–µ–Ω
 *
 * @example
 * ```typescript
 * const { accessToken } = await adminConfirm2FA(123456);
 * sessionStorage.setItem('adminToken', accessToken);
 * ```
 */
export async function adminConfirm2FA(
  code: number,
): Promise<AdminLoginOutputDto> {
  const data: AdminLogin2faFakeInputDto = { code };

  // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è 2FA –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
  const tempToken = sessionStorage.getItem("adminTempToken");
  if (!tempToken) {
    throw new Error("–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è 2FA –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.");
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  console.log("üîê AdminConfirm2FA Debug:", {
    code,
    tempTokenLength: tempToken.length,
    tempTokenPrefix: tempToken.substring(0, 20) + "...",
    endpoint: "/auth/admin/2fa/confirm"
  });

  return apiRequest<AdminLoginOutputDto>("/auth/admin/2fa/confirm", {
    method: "POST",
    body: JSON.stringify(data),
    skipAuthErrorHandling: true, // –ù–ï –æ—á–∏—â–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ (—É–±–∏—Ä–∞–µ–º baseUrl)
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    headers: {
      "Authorization": `Bearer ${tempToken}`,
      "Content-Type": "application/json"
    }
  });
}

// ====== ADMIN BLOGGER MANAGEMENT ======

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –±–ª–æ–≥–µ—Ä–æ–≤ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 *
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
 * @returns Promise —Å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –±–ª–æ–≥–µ—Ä–æ–≤
 *
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 *
 * @example
 * ```typescript
 * const bloggers = await adminGetBloggers({
 *   page: 1,
 *   size: 20,
 *   socialType: 'INSTAGRAM',
 *   verificationStatus: 'APPROVED',
 *   isHidden: false
 * });
 * ```
 */
export async function adminGetBloggers(
  params: AdminGetBloggersQuery = {},
): Promise<AdminGetBloggersResponse> {
  const query = new URLSearchParams();

  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined && value !== null) {
      if (Array.isArray(value)) {
        // –î–ª—è –º–∞—Å—Å–∏–≤–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        value.forEach((v) => query.append(key, String(v)));
      } else {
        query.append(key, String(value));
      }
    }
  });

  return apiRequest<AdminGetBloggersResponse>(`/admin/blogger?${query}`);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–ª–æ–≥–µ—Ä–∞–º –¥–ª—è Dashboard
 *
 * @returns Promise —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –±–ª–æ–≥–µ—Ä–æ–≤
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 *
 * @example
 * ```typescript
 * const stats = await adminGetBloggersStats();
 * // stats.totalBloggersCount, stats.totalApprovedBloggersCount, etc.
 * ```
 */
export async function adminGetBloggersStats(): Promise<AdminGetBloggersStatsOutputDto> {
  return apiRequest<AdminGetBloggersStatsOutputDto>("/admin/blogger/stats", {
    method: "GET",
  });
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 *
 * @param username - Instagram username –±–ª–æ–≥–µ—Ä–∞
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Incorrect input data –∏–ª–∏ blogger already exists
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 *
 * @example
 * ```typescript
 * await adminCreateBlogger('anna_petrova');
 * ```
 */
export async function adminCreateBlogger(username: string): Promise<void> {
  const data: AdminCreateBloggerInputDto = { username };

  return apiRequest<void>("/admin/blogger", {
    method: "POST",
    body: JSON.stringify(data),
  });
}

/**
 * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ (–ø–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å)
 *
 * @param bloggerId - ID –±–ª–æ–≥–µ—Ä–∞
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Incorrect input data
 * @throws APIError 404 - Blogger not found
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 *
 * @example
 * ```typescript
 * await adminToggleBloggerVisibility(123);
 * ```
 */
export async function adminToggleBloggerVisibility(
  bloggerId: number,
): Promise<void> {
  return apiRequest<void>(`/admin/blogger/visibility/${bloggerId}`, {
    method: "PATCH",
  });
}

/**
 * ‚ö†Ô∏è TODO: Backend endpoint required
 *
 * GET /admin/blogger
 * Auth: Required (admin-auth-jwt-schema)
 *
 * Query Parameters:
 *   page?: number = 1
 *   size?: number = 50
 *   verificationStatus?: 'NEW' | 'APPROVED' | 'REJECTED' | 'MODERATION'
 *   isHidden?: boolean
 *   search?: string (–ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ username)
 *
 * Response: PaginationUtil<AdminGetBloggerOutputDto[]>
 *
 * AdminGetBloggerOutputDto {
 *   id, userId, name, lastName, verificationStatus, isHidden,
 *   socialAccounts: Array<{ type, username, subscribers }>,
 *   hasDrafts: boolean,
 *   createdAt, updatedAt
 * }
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```typescript
 * export async function adminGetAllBloggers(params: {
 *   page?: number;
 *   size?: number;
 *   verificationStatus?: 'NEW' | 'APPROVED' | 'REJECTED' | 'MODERATION';
 *   isHidden?: boolean;
 *   search?: string;
 * }): Promise<PaginationUtil<AdminGetBloggerOutputDto[]>> {
 *   const query = new URLSearchParams();
 *   Object.entries(params).forEach(([key, value]) => {
 *     if (value !== undefined) query.append(key, String(value));
 *   });
 *   return apiRequest(`/admin/blogger?${query}`);
 * }
 * ```
 */

/**
 * ‚ö†Ô∏è TODO: Backend endpoint required
 *
 * POST /admin/blogger/{id}/approve
 * Auth: Required (admin-auth-jwt-schema)
 *
 * Body: {} // –ø—É—Å—Ç–æ–π
 * Response: 204 No Content
 *
 * –õ–æ–≥–∏–∫–∞:
 * 1. –ò–∑–º–µ–Ω–∏—Ç—å verificationStatus –Ω–∞ APPROVED
 * 2. –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏ (BloggerUpdateProfileDraft, BloggerSocialPriceDraft, BloggerCoverageSocialDraft)
 * 3. –£–¥–∞–ª–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 *
 * –û—à–∏–±–∫–∏:
 *   400 - Blogger already approved
 *   404 - Blogger not found
 *   401 - Unauthorized
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```typescript
 * export async function adminApproveBlogger(bloggerId: number): Promise<void> {
 *   return apiRequest(`/admin/blogger/${bloggerId}/approve`, {
 *     method: 'POST',
 *     body: JSON.stringify({}),
 *   });
 * }
 * ```
 */

/**
 * ‚ö†Ô∏è TODO: Backend endpoint required
 *
 * POST /admin/blogger/{id}/reject
 * Auth: Required (admin-auth-jwt-schema)
 *
 * Body: { reason?: string }
 * Response: 204 No Content
 *
 * –õ–æ–≥–∏–∫–∞:
 * 1. –ò–∑–º–µ–Ω–∏—Ç—å verificationStatus –Ω–∞ REJECTED
 * 2. –ù–ï —É–¥–∞–ª—è—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫–∏ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å)
 *
 * –û—à–∏–±–∫–∏:
 *   400 - Blogger already rejected
 *   404 - Blogger not found
 *   401 - Unauthorized
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```typescript
 * export async function adminRejectBlogger(
 *   bloggerId: number,
 *   reason?: string
 * ): Promise<void> {
 *   return apiRequest(`/admin/blogger/${bloggerId}/reject`, {
 *     method: 'POST',
 *     body: JSON.stringify({ reason }),
 *   });
 * }
 * ```
 */

/**
 * ‚ö†Ô∏è TODO: Backend endpoint required
 *
 * PATCH /admin/blogger/{id}/visibility
 * Auth: Required (admin-auth-jwt-schema)
 *
 * Body: { isHidden: boolean }
 * Response: 204 No Content
 *
 * –õ–æ–≥–∏–∫–∞:
 * 1. –û–±–Ω–æ–≤–∏—Ç—å isHidden –≤ Blogger
 * 2. –°–∫—Ä—ã—Ç—ã–µ –±–ª–æ–≥–µ—Ä—ã –ù–ï –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ GET /blogger/public
 *
 * –û—à–∏–±–∫–∏:
 *   404 - Blogger not found
 *   401 - Unauthorized
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```typescript
 * export async function adminToggleBloggerVisibility(
 *   bloggerId: number,
 *   isHidden: boolean
 * ): Promise<void> {
 *   return apiRequest(`/admin/blogger/${bloggerId}/visibility`, {
 *     method: 'PATCH',
 *     body: JSON.stringify({ isHidden }),
 *   });
 * }
 * ```
 */

/**
 * ‚ö†Ô∏è TODO: Backend endpoint required
 *
 * DELETE /admin/blogger/{id}
 * Auth: Required (admin-auth-jwt-schema)
 *
 * Response: 204 No Content
 *
 * –õ–æ–≥–∏–∫–∞:
 * 1. Cascade delete –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (SocialAccount, BloggerSocialPrice, drafts, topics)
 * 2. Soft delete vs Hard delete - –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ backend
 *
 * –û—à–∏–±–∫–∏:
 *   404 - Blogger not found
 *   401 - Unauthorized
 *
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```typescript
 * export async function adminDeleteBlogger(bloggerId: number): Promise<void> {
 *   return apiRequest(`/admin/blogger/${bloggerId}`, {
 *     method: 'DELETE',
 *   });
 * }
 * ```
 */

/**
 * ‚ö†Ô∏è TODO: Backend endpoint required
 * 
 * POST /admin/blogger
 * Auth: Required (admin-auth-jwt-schema)
 * 
 * Body: {
 *   name: string,
 *   lastName: string,
 *   genderType: ApiGender,
 *   socialAccounts: [{
 *     type: 'INSTAGRAM',
 *     username: string // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç—è –±—ã Instagram
 *   }]
 * }
 * 
 * Response: 201 Created
 * {
 *   id: number,
 *   name: string,
 *   lastName: string,
 *   verificationStatus: 'NEW',
 *   createdAt: string
 * }
 * 
 * –õ–æ–≥–∏–∫–∞:
 * 1. –°–æ–∑–¥–∞—Ç—å Blogger —Å verificationStatus = NEW
 * 2. –°–æ–∑–¥–∞—Ç—å SocialAccount –¥–ª—è Instagram (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
 * 3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Instagram (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
 * 
 * –û—à–∏–±–∫–∏:
 *   400 - Validation error / Username already exists
 *   401 - Unauthorized
 * 
 * –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```typescript
 * export async function adminCreateBlogger(data: {
 *   name: string;
 *   lastName: string;
 *   genderType: ApiGender;
 *   instagramUsername: string;
 * }): Promise<{ id: number }> {
 *   return apiRequest('/admin/blogger', {
 *     method: 'POST',
 *     body: JSON.stringify({
 *       name: data.name,
 *       lastName: data.lastName,
 *       genderType: data.genderType,
 *       socialAccounts: [
 *         { type: 'INSTAGRAM', username: data.instagramUsername }
 *       ]
 *     }),
 *   });
 * }
 * ```

// ====== ADMIN LINK REQUESTS (Backend —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω) ======

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
 * 
 * @param params - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
 * @returns Promise —Å –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—Ä–æ—Å–æ–≤
 * 
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 * 
 * @example
 * ```typescript
 * const requests = await getAdminLinkRequests({
 *   page: 1,
 *   size: 20,
 *   status: 'MODERATION',
 *   sortDirection: 'desc',
 *   sortField: 'createdAt'
 * });
 * ```
 */
export async function getAdminLinkRequests(
  params: GetLinkRequestsParams = {},
): Promise<PaginationUtil<AdminGetLinkBloggerClientRequestOutputDto[]>> {
  const query = new URLSearchParams();

  Object.entries(params).forEach(([key, value]) => {
    if (value !== undefined) {
      query.append(key, String(value));
    }
  });

  return apiRequest<
    PaginationUtil<AdminGetLinkBloggerClientRequestOutputDto[]>
  >(`/admin/link/blogger-client?${query}`);
}

/**
 * –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
 *
 * @param requestId - ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Request already processed
 * @throws APIError 404 - Request not found
 * @throws APIError 401 - Unauthorized
 *
 * @example
 * ```typescript
 * await approveLinkRequest(123);
 * ```
 */
export async function approveLinkRequest(requestId: number): Promise<void> {
  return apiRequest<void>(`/admin/link/blogger-client/approve/${requestId}`, {
    method: "POST",
  });
}

/**
 * –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ —Å –∫–ª–∏–µ–Ω—Ç–æ–º
 *
 * @param requestId - ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Request already processed
 * @throws APIError 404 - Request not found
 * @throws APIError 401 - Unauthorized
 *
 * @example
 * ```typescript
 * await rejectLinkRequest(123);
 * ```
 */
export async function rejectLinkRequest(requestId: number): Promise<void> {
  return apiRequest<void>(`/admin/link/blogger-client/reject/${requestId}`, {
    method: "POST",
  });
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–≥–µ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
 *
 * @param bloggerId - ID –±–ª–æ–≥–µ—Ä–∞
 * @param fileId - ID —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Incorrect input data
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 * @throws APIError 403 - File not belong to this blogger
 * @throws APIError 404 - Blogger or file not found
 *
 * @note –¢—Ä–µ–±—É–µ—Ç Authorization header —Å admin token
 * @note –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞
 *
 * @example
 * ```typescript
 * await adminDeleteBloggerStatsFile(123, 456);
 * ```
 */
export async function adminDeleteBloggerStatsFile(
  bloggerId: number,
  fileId: number,
): Promise<void> {
  return apiRequest<void>(`/admin/blogger/${bloggerId}/${fileId}`, {
    method: "DELETE",
  });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –±–ª–æ–≥–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * PUT /admin/blogger/{bloggerId}
 *
 * @param bloggerId - ID –±–ª–æ–≥–µ—Ä–∞
 * @param data - –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Incorrect input data
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 * @throws APIError 404 - Blogger not found
 *
 * @note –¢—Ä–µ–±—É–µ—Ç Authorization header —Å admin token
 * @note –í—Å–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–µ –ø–æ–ª—è
 *
 * @example
 * ```typescript
 * await adminUpdateBlogger(123, {
 *   name: '–ù–æ–≤–æ–µ –∏–º—è',
 *   description: '–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
 *   topics: [1, 2, 3]
 * });
 * ```
 */
export async function adminUpdateBlogger(
  bloggerId: number,
  data: BloggerUpdateProfileInputDto,
): Promise<void> {
  return apiRequest<void>(`/admin/blogger/${bloggerId}`, {
    method: "PUT",
    body: JSON.stringify(data),
  });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Å–æ—Ü. –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ –±–ª–æ–≥–µ—Ä–∞
 * PUT /admin/blogger/social-price/{bloggerId}
 *
 * @param bloggerId - ID –±–ª–æ–≥–µ—Ä–∞
 * @param data - –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Incorrect input data
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 * @throws APIError 404 - Blogger or social media not found
 *
 * @note –¢—Ä–µ–±—É–µ—Ç Authorization header —Å admin token
 * @note –ü–æ–ª–µ type –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã
 *
 * @example
 * ```typescript
 * await adminUpdateBloggerSocialPrice(123, {
 *   type: 'INSTAGRAM',
 *   postPrice: 1000,
 *   storiesPrice: 500
 * });
 * ```
 */
export async function adminUpdateBloggerSocialPrice(
  bloggerId: number,
  data: BloggerUpdateSocialPriceInputDto,
): Promise<void> {
  console.log('üåê adminUpdateBloggerSocialPrice API call:', {
    url: `/admin/blogger/social-price/${bloggerId}`,
    method: 'PUT',
    data
  });
  
  try {
    const result = await apiRequest<void>(`/admin/blogger/social-price/${bloggerId}`, {
      method: "PUT",
      body: JSON.stringify(data),
    });
    console.log('‚úÖ adminUpdateBloggerSocialPrice API response:', result);
    return result;
  } catch (error) {
    console.error('‚ùå adminUpdateBloggerSocialPrice API error:', error);
    throw error;
  }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–ª–æ–≥–µ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
 * PUT /admin/blogger/stats-upload/{bloggerId}
 *
 * @param bloggerId - ID –±–ª–æ–≥–µ—Ä–∞
 * @param type - —Ç–∏–ø —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
 * @param files - –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
 * @returns Promise<void> (204 No Content)
 *
 * @throws APIError 400 - Incorrect input data –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ–∞–π–ª–æ–≤
 * @throws APIError 401 - Unauthorized (—Ç—Ä–µ–±—É–µ—Ç—Å—è admin token)
 * @throws APIError 404 - Blogger or social media not found
 *
 * @note –¢—Ä–µ–±—É–µ—Ç Authorization header —Å admin token
 * @note –ú–∞–∫—Å–∏–º—É–º 25 —Ñ–∞–π–ª–æ–≤, —Ä–∞–∑–º–µ—Ä –¥–æ 10MB –∫–∞–∂–¥—ã–π
 * @note –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: image/jpeg, image/png
 *
 * @example
 * ```typescript
 * await adminUploadBloggerStats(123, 'INSTAGRAM', [file1, file2]);
 * ```
 */
export async function adminUploadBloggerStats(
  bloggerId: number,
  type: ApiSocialType,
  files: File[],
): Promise<void> {
  const formData = new FormData();
  formData.append("type", type);
  files.forEach((file) => formData.append("files", file));

  return apiRequest<void>(`/admin/blogger/stats-upload/${bloggerId}`, {
    method: "PUT",
    body: formData,
    headers: {}, // –£–±–∏—Ä–∞–µ–º Content-Type, –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–ª—è FormData
  });
}
