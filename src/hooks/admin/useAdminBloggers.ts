import { useState, useEffect, useCallback } from "react";
import { getAllBloggers } from "@/api/endpoints/blogger";
import { mapApiListBloggerToLocal } from "@/utils/api/mappers";
import { APIError } from "@/api/client";
import { useToast } from "@/hooks/use-toast";
import { logError, logWarn } from "@/utils/logger";
import { useDebounce } from "@/hooks/useDebounce";
import {
  getAdminLinkRequests,
  approveLinkRequest,
  rejectLinkRequest,
  adminGetBloggers,
  adminGetBloggersStats,
  adminEnrichBloggersWithGender,
  adminGetBloggersWithoutGender,
} from "../../api/endpoints/admin";
import type {
  AdminGetLinkBloggerClientRequestOutputDto,
  LinkRequestStatus,
  AdminGetBloggerOutputDto,
  AdminGetBloggersStatsOutputDto,
  AdminBloggerWithGender,
  ApiGender,
} from "../../api/types";

interface BloggerStats {
  totalBloggersCount: number;
  totalApprovedBloggersCount: number;
  totalVisibleBloggersCount: number;
  totalModerationLinkRequestsCount: number;
}

interface GetLinkRequestsParams {
  page?: number;
  size?: number;
  sortDirection?: "asc" | "desc";
  sortField?: "createdAt";
  status?: LinkRequestStatus;
}

export const useAdminBloggers = () => {
  const { toast } = useToast();
  const [allBloggers, setAllBloggers] = useState<AdminBloggerWithGender[]>(
    [],
  );
  const [bloggersWithoutGender, setBloggersWithoutGender] = useState<AdminBloggerWithGender[]>([]);
  const [loadingGenderBloggers, setLoadingGenderBloggers] = useState(false);
  const [genderBloggersPage, setGenderBloggersPage] = useState(1);
  const [hasMoreGenderBloggers, setHasMoreGenderBloggers] = useState(true);
  const [totalGenderBloggersCount, setTotalGenderBloggersCount] = useState(0);
  const [genderPagesCache, setGenderPagesCache] = useState<Map<number, AdminBloggerWithGender[]>>(new Map());
  const [linkRequests, setLinkRequests] = useState<
    AdminGetLinkBloggerClientRequestOutputDto[]
  >([]);
  const [loading, setLoading] = useState(true);
  const [searchLoading, setSearchLoading] = useState(false); // –û—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
  const [error, setError] = useState<string | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const [hasMoreBloggers, setHasMoreBloggers] = useState(true);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalBloggersCount, setTotalBloggersCount] = useState(0);
  const [searchTerm, setSearchTerm] = useState("");
  const [showHidden, setShowHidden] = useState(false);
  const debouncedSearchTerm = useDebounce(searchTerm, 500); // 500ms –∑–∞–¥–µ—Ä–∂–∫–∞
  const [stats, setStats] = useState<AdminGetBloggersStatsOutputDto>({
    totalBloggersCount: 0,
    totalApprovedBloggersCount: 0,
    totalVisibleBloggersCount: 0,
    totalModerationLinkRequestsCount: 0,
  });

  const fetchBloggers = useCallback(
    async (
      page: number = 1,
      append: boolean = false,
      isSearch: boolean = false,
    ) => {
      try {
        if (page === 1) {
          if (isSearch) {
            setSearchLoading(true); // –î–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          } else {
            setLoading(true); // –î–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          }
        } else {
          setIsLoadingMore(true);
        }
        setError(null);

        // ============================================
        // ‚úÖ –ò–°–ü–û–õ–¨–ó–£–ï–ú –ê–î–ú–ò–ù–°–ö–ò–ï –≠–ù–î–ü–û–ò–ù–¢–´
        // ============================================

        // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –±–ª–æ–≥–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω—Å–∫–∏–π API
        const bloggersResponse = await adminGetBloggers({
          page: page,
          size: 50,
          sortDirection: "desc",
          sortField: "createdAt",
          username: debouncedSearchTerm || undefined, // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounced –ø–æ–∏—Å–∫
        });

        // 1.5. –û–±–æ–≥–∞—â–∞–µ–º –±–ª–æ–≥–µ—Ä–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª–µ
        const enrichedBloggers = await adminEnrichBloggersWithGender(bloggersResponse.items);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–ª–æ–≥–µ—Ä–æ–≤
        if (page === 1) {
          setAllBloggers(enrichedBloggers);
        } else {
          setAllBloggers((prev) => [...prev, ...enrichedBloggers]);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        setTotalBloggersCount(bloggersResponse.totalCount);
        setHasMoreBloggers(
          bloggersResponse.items.length === 50 &&
            page * 50 < bloggersResponse.totalCount,
        );
        setCurrentPage(page);

        // 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        if (page === 1) {
          const statsResponse = await adminGetBloggersStats();
          setStats(statsResponse);
        }

        // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        if (page === 1) {
          const linkRequestsResponse = await getAdminLinkRequests({
            status: "MODERATION",
            page: 1,
            size: 50,
            sortDirection: "desc",
            sortField: "createdAt",
          });

          setLinkRequests(linkRequestsResponse.items);
        }
      } catch (error: unknown) {
        logError("Error fetching data:", error);
        setError(error instanceof Error ? error.message : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");

        if (error instanceof APIError) {
          toast({
            title: "–û—à–∏–±–∫–∞ API",
            description: error.message,
            variant: "destructive",
          });
        } else {
          toast({
            title: "–û—à–∏–±–∫–∞",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
            variant: "destructive",
          });
        }
      } finally {
        if (page === 1) {
          if (isSearch) {
            setSearchLoading(false);
          } else {
            setLoading(false);
          }
        } else {
          setIsLoadingMore(false);
        }
      }
    },
    [debouncedSearchTerm],
  ); // –ò—Å–ø–æ–ª—å–∑—É–µ–º debounced –∑–Ω–∞—á–µ–Ω–∏–µ

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ (–±–µ–∑ –ø–æ–∏—Å–∫–∞)
  useEffect(() => {
    if (!debouncedSearchTerm) {
      fetchBloggers(1, false, false);
    }
  }, [fetchBloggers, debouncedSearchTerm]);

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
  useEffect(() => {
    if (debouncedSearchTerm) {
      fetchBloggers(1, false, true);
    }
  }, [debouncedSearchTerm, fetchBloggers]);

  const loadMoreBloggers = useCallback(async () => {
    if (!hasMoreBloggers || isLoadingMore) return;
    await fetchBloggers(currentPage + 1, true);
  }, [hasMoreBloggers, isLoadingMore, currentPage, fetchBloggers]);

  const approveRequest = useCallback(async (requestId: number) => {
    try {
      setIsProcessing(true);
      setError(null);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await approveLinkRequest(requestId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
      setLinkRequests((prev) => {
        const filtered = prev.filter(
          (req) => Number(req.request_id) !== Number(requestId),
        );
        logWarn(
          `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è: —É–¥–∞–ª–µ–Ω –∑–∞–ø—Ä–æ—Å ID ${requestId}, –æ—Å—Ç–∞–ª–æ—Å—å ${filtered.length} –∑–∞–ø—Ä–æ—Å–æ–≤`,
        );
        return filtered;
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setStats((prev) => ({
        ...prev,
        totalModerationLinkRequestsCount:
          prev.totalModerationLinkRequestsCount - 1,
        totalApprovedBloggersCount: prev.totalApprovedBloggersCount + 1,
      }));
    } catch (err: unknown) {
      logError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err);

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
      if (err instanceof Error) {
        logError("‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", {
          message: err.message,
          name: err.name,
          stack: err.stack,
        });
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API –æ—à–∏–±–∫–∏
      if (err instanceof APIError) {
        setError(err.message);
        throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º APIError –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ UI
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏
      const errorMessage =
        err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞";
      setError(errorMessage);
      throw new Error(errorMessage); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–æ–±—Ä–æ—Å–∞
    } finally {
      setIsProcessing(false);
    }
  }, []);

  const rejectRequest = useCallback(async (requestId: number) => {
    try {
      setIsProcessing(true);
      setError(null);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      await rejectLinkRequest(requestId);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
      setLinkRequests((prev) => {
        const filtered = prev.filter(
          (req) => Number(req.request_id) !== Number(requestId),
        );
        logWarn(
          `üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: —É–¥–∞–ª–µ–Ω –∑–∞–ø—Ä–æ—Å ID ${requestId}, –æ—Å—Ç–∞–ª–æ—Å—å ${filtered.length} –∑–∞–ø—Ä–æ—Å–æ–≤`,
        );
        return filtered;
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      setStats((prev) => ({
        ...prev,
        totalModerationLinkRequestsCount:
          prev.totalModerationLinkRequestsCount - 1,
      }));
    } catch (err: unknown) {
      logError("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º API –æ—à–∏–±–∫–∏
      if (err instanceof APIError) {
        setError(err.message);
        throw err; // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º APIError –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ UI
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏
      const errorMessage =
        err instanceof Error ? err.message : "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞";
      setError(errorMessage);
      throw new Error(errorMessage); // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –æ—à–∏–±–∫—É –¥–ª—è –ø—Ä–æ–±—Ä–æ—Å–∞
    } finally {
      setIsProcessing(false);
    }
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–≥–µ—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  const updateBloggerVisibility = useCallback(
    (bloggerId: number, isHidden: boolean) => {
      setAllBloggers((prev) =>
        prev.map((blogger) =>
          blogger.id === bloggerId ? { ...blogger, isHidden } : blogger,
        ),
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∏–¥–∏–º—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤
      setStats((prev) => ({
        ...prev,
        totalVisibleBloggersCount: isHidden
          ? prev.totalVisibleBloggersCount - 1
          : prev.totalVisibleBloggersCount + 1,
      }));
    },
    [],
  );

  // –§–∏–ª—å—Ç—Ä—É–µ–º –±–ª–æ–≥–µ—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞–∑–∞ —Å–∫—Ä—ã—Ç—ã—Ö
  const filteredBloggers = showHidden 
    ? allBloggers 
    : allBloggers.filter(blogger => !blogger.isHidden);

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∞ –±–ª–æ–≥–µ—Ä–∞ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
  const updateBloggerGenderLocally = useCallback((bloggerId: number, genderType: ApiGender) => {
    setAllBloggers(prevBloggers => 
      prevBloggers.map(blogger => 
        blogger.id === bloggerId 
          ? { ...blogger, genderType }
          : blogger
      )
    );
    
    // –£–¥–∞–ª—è–µ–º –±–ª–æ–≥–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –±–µ–∑ –ø–æ–ª–∞
    setBloggersWithoutGender(prevBloggers => 
      prevBloggers.filter(blogger => blogger.id !== bloggerId)
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à - —É–¥–∞–ª—è–µ–º —ç—Ç–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ –∏–∑ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –∫—ç—à–µ
    setGenderPagesCache(prevCache => {
      const newCache = new Map(prevCache);
      newCache.forEach((bloggers, pageNumber) => {
        const updatedBloggers = bloggers.filter(blogger => blogger.id !== bloggerId);
        newCache.set(pageNumber, updatedBloggers);
      });
      return newCache;
    });
    
    // –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
    setTotalGenderBloggersCount(prev => Math.max(0, prev - 1));
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–ª–∞
  const fetchBloggersWithoutGender = useCallback(async (page: number = 1, append: boolean = false) => {
    try {
      setLoadingGenderBloggers(true);
      
      const result = await adminGetBloggersWithoutGender(page, 50, genderPagesCache);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –±–ª–æ–≥–µ—Ä–æ–≤ —Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª–æ–º
      const filteredBloggers = result.bloggers.filter(blogger => 
        !blogger.genderType || blogger.genderType === null
      );
      
      if (append) {
        setBloggersWithoutGender(prev => [...prev, ...filteredBloggers]);
      } else {
        setBloggersWithoutGender(filteredBloggers);
      }
      
      setHasMoreGenderBloggers(result.hasMore);
      setTotalGenderBloggersCount(result.totalCount);
      setGenderBloggersPage(page);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      setGenderPagesCache(result.cachedPages);
    } catch (error) {
      console.error("Error fetching bloggers without gender:", error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–ª–æ–≥–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–ª–∞",
        variant: "destructive",
      });
    } finally {
      setLoadingGenderBloggers(false);
    }
  }, [toast, genderPagesCache]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π –ø–∞—á–∫–∏ –±–ª–æ–≥–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–ª–∞
  const loadMoreGenderBloggers = useCallback(() => {
    if (!loadingGenderBloggers && hasMoreGenderBloggers) {
      fetchBloggersWithoutGender(genderBloggersPage + 1, true);
    }
  }, [loadingGenderBloggers, hasMoreGenderBloggers, genderBloggersPage, fetchBloggersWithoutGender]);

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –±–ª–æ–≥–µ—Ä–æ–≤ –±–µ–∑ –ø–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö)
  const clearGenderCache = useCallback(() => {
    setGenderPagesCache(new Map());
    setBloggersWithoutGender([]);
    setGenderBloggersPage(1);
    setHasMoreGenderBloggers(true);
    setTotalGenderBloggersCount(0);
  }, []);

  return {
    allBloggers: filteredBloggers,
    bloggersWithoutGender,
    linkRequests,
    loading,
    searchLoading,
    isLoadingMore,
    hasMoreBloggers,
    totalBloggersCount,
    stats,
    searchTerm,
    setSearchTerm,
    showHidden,
    setShowHidden,
    fetchBloggers,
    loadMoreBloggers,
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏–µ
    approveRequest,
    rejectRequest,
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±–ª–æ–≥–µ—Ä–∞
    updateBloggerVisibility,
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª–∞ –±–ª–æ–≥–µ—Ä–∞
    updateBloggerGenderLocally,
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–≥–µ—Ä–∞–º–∏ –±–µ–∑ –ø–æ–ª–∞
    fetchBloggersWithoutGender,
    loadMoreGenderBloggers,
    loadingGenderBloggers,
    hasMoreGenderBloggers,
    totalGenderBloggersCount,
    clearGenderCache,
    isProcessing,
    error,
  };
};
